import UIKit

class Creature {
    var attack: Int
    var defense: Int
    var health: Int

    init(attack: Int, defense: Int, health: Int) {
        self.attack = attack
        self.defense = defense
        self.health = health
    }

    func takeDamage(damage: Int) {
        health -= damage
        if health <= 0 {
            health = 0
            die()
        }
    }

    func die() {
        print("Существо погибло.")
    }
}

class Player: Creature {
    var maxHealth: Int

    override init(attack: Int, defense: Int, health: Int) {
        self.maxHealth = health
        super.init(attack: attack, defense: defense, health: health)
    }

    func heal() {
        if health == 0 {
            print("Нельзя использовать исцеление на погибшем игроке.")
            return
        }

        guard maxHealth > 0 else {
            fatalError("Неверное значение maxHealth.")
        }

        guard health >= 0 && health <= maxHealth else {
            fatalError("Неверное значение health.")
        }

        let amount: Int
        if Double(maxHealth - health) < 0.3 * Double(maxHealth) {
            amount = maxHealth - health
        } else {
            amount = Int(0.3 * Double(maxHealth))
        }

        health += amount
        print("Игрок исцелился на \(amount) здоровья. Текущее здоровье: \(health)")
    }

    func attackCreature(_ creature: Creature) {
        guard creature is Monster else {
            fatalError("Неверное значение объекта существа.")
        }

        let attackModifier = attack - creature.defense + 1
        var success = false

        if attackModifier > 0 {
            let diceRolls = max(1, attackModifier)
            for _ in 0..<diceRolls {
                let roll = Int.random(in: 1...6)
                if roll >= 5 {
                    success = true
                    break
                }
            }
        }

        if success {
            let damage = Int.random(in: 1...6)
            creature.takeDamage(damage: damage)
            print("Игрок успешно атаковал на \(damage) урона.")
        } else {
            print("Игрок промахнулся.")
        }
    }
}

class Monster: Creature {
    var damageRange: ClosedRange<Int>

    init(attack: Int, defense: Int, health: Int, damageRange: ClosedRange<Int>) {
        self.damageRange = damageRange
        super.init(attack: attack, defense: defense, health: health)
    }

    func attackCreature(_ creature: Creature) {
        let damage = Int.random(in: damageRange)
        creature.takeDamage(damage: damage)
        print("Монстр атаковал на \(damage) урона.")
    }
}

// Пример использования классов
let player = Player(attack: 10, defense: 8, health: 100)
let monster = Monster(attack: 12, defense: 6, health: 50, damageRange: 1...6)

player.attackCreature(monster)
monster.attackCreature(player)

player.heal()
player.attackCreature(monster)
monster.attackCreature(player)

player.heal()
player.attackCreature(monster)
